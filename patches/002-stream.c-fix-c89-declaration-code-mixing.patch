diff --git a/src/stream.c b/src/stream.c
index aad6d55..88bf157 100644
--- a/src/stream.c
+++ b/src/stream.c
@@ -64,15 +64,19 @@ SHARC_FORCE_INLINE void sharc_stream_free_work_buffer(sharc_stream *stream) {
 }
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress_init(sharc_stream *restrict stream, const SHARC_COMPRESSION_MODE compressionMode, const SHARC_ENCODE_OUTPUT_TYPE outputType, const SHARC_BLOCK_TYPE blockType, const struct stat *restrict fileAttributes) {
+    SHARC_STREAM_STATE streamState;
+    uint_fast64_t workBufferSize;
+    SHARC_ENCODE_STATE encodeState;
+
     if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_PREPARED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_STREAM_STATE streamState = sharc_stream_check_conformity(stream);
+    streamState = sharc_stream_check_conformity(stream);
     if (streamState)
         return streamState;
 
-    uint_fast64_t workBufferSize = SHARC_HASH_ENCODE_MINIMUM_OUTPUT_LOOKAHEAD + 0x20 + sharc_metadata_max_compressed_length(stream->in.size, SHARC_COMPRESSION_MODE_FASTEST, false);
-    SHARC_ENCODE_STATE encodeState = sharc_encode_init(&stream->out, &stream->internal_state.workBuffer, workBufferSize, &stream->internal_state.internal_encode_state, compressionMode, outputType, blockType, fileAttributes);
+    workBufferSize = SHARC_HASH_ENCODE_MINIMUM_OUTPUT_LOOKAHEAD + 0x20 + sharc_metadata_max_compressed_length(stream->in.size, SHARC_COMPRESSION_MODE_FASTEST, false);
+    encodeState = sharc_encode_init(&stream->out, &stream->internal_state.workBuffer, workBufferSize, &stream->internal_state.internal_encode_state, compressionMode, outputType, blockType, fileAttributes);
     switch (encodeState) {
         case SHARC_ENCODE_STATE_READY:
             break;
@@ -97,11 +101,11 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress_init(sharc_stream *r
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress(sharc_stream *stream, const sharc_bool flush) {
     SHARC_ENCODE_STATE encodeState;
-
+    SHARC_STREAM_STATE streamState;
     if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_COMPRESSION_INITED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_STREAM_STATE streamState = sharc_stream_check_conformity(stream);
+    streamState = sharc_stream_check_conformity(stream);
     if (streamState)
         return streamState;
 
@@ -129,14 +133,17 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress(sharc_stream *stream
 }
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress_finish(sharc_stream *stream) {
+    SHARC_STREAM_STATE streamState;
+    SHARC_ENCODE_STATE encodeState;
+
     if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_COMPRESSION_DATA_FINISHED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_STREAM_STATE streamState = sharc_stream_check_conformity(stream);
+    streamState = sharc_stream_check_conformity(stream);
     if (streamState)
         return streamState;
 
-    SHARC_ENCODE_STATE encodeState = sharc_encode_finish(&stream->out, &stream->internal_state.internal_encode_state);
+    encodeState = sharc_encode_finish(&stream->out, &stream->internal_state.internal_encode_state);
     switch (encodeState) {
         case SHARC_ENCODE_STATE_READY:
             break;
@@ -157,15 +164,19 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_compress_finish(sharc_stream
 }
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress_init(sharc_stream *stream) {
+    SHARC_STREAM_STATE streamState;
+    uint_fast64_t workBufferSize;
+    SHARC_DECODE_STATE decodeState;
+
     if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_PREPARED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_STREAM_STATE streamState = sharc_stream_check_conformity(stream);
+    streamState = sharc_stream_check_conformity(stream);
     if (streamState)
         return streamState;
 
-    uint_fast64_t workBufferSize = 0x20 + sharc_metadata_max_decompressed_length(stream->in.size, SHARC_COMPRESSION_MODE_FASTEST, false);
-    SHARC_DECODE_STATE decodeState = sharc_decode_init(&stream->in, &stream->internal_state.workBuffer, workBufferSize, &stream->internal_state.internal_decode_state);
+    workBufferSize = 0x20 + sharc_metadata_max_decompressed_length(stream->in.size, SHARC_COMPRESSION_MODE_FASTEST, false);
+    decodeState = sharc_decode_init(&stream->in, &stream->internal_state.workBuffer, workBufferSize, &stream->internal_state.internal_decode_state);
     switch (decodeState) {
         case SHARC_DECODE_STATE_READY:
             break;
@@ -189,14 +200,17 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress_init(sharc_stream
 }
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress(sharc_stream *stream, const sharc_bool flush) {
-    if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_DECOMPRESSION_INITED)
+	SHARC_STREAM_STATE streamState;
+	SHARC_DECODE_STATE decodeState;
+
+	if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_DECOMPRESSION_INITED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_STREAM_STATE streamState = sharc_stream_check_conformity(stream);
+    streamState = sharc_stream_check_conformity(stream);
     if (streamState)
         return streamState;
 
-    SHARC_DECODE_STATE decodeState = sharc_decode_process(&stream->in, &stream->out, &stream->internal_state.internal_decode_state, flush);
+    decodeState = sharc_decode_process(&stream->in, &stream->out, &stream->internal_state.internal_decode_state, flush);
     switch (decodeState) {
         case SHARC_DECODE_STATE_READY:
             break;
@@ -217,10 +231,12 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress(sharc_stream *stre
 }
 
 SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress_finish(sharc_stream *stream) {
-    if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_DECOMPRESSION_DATA_FINISHED)
+	SHARC_DECODE_STATE decodeState;
+
+	if (stream->internal_state.process ^ SHARC_STREAM_PROCESS_DECOMPRESSION_DATA_FINISHED)
         return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
 
-    SHARC_DECODE_STATE decodeState = sharc_decode_finish(&stream->in, &stream->internal_state.internal_decode_state);
+    decodeState = sharc_decode_finish(&stream->in, &stream->internal_state.internal_decode_state);
     switch (decodeState) {
         case SHARC_DECODE_STATE_READY:
             break;
@@ -250,4 +266,4 @@ SHARC_FORCE_INLINE SHARC_STREAM_STATE sharc_stream_decompress_utilities_get_head
         default:
             return SHARC_STREAM_STATE_ERROR_INVALID_INTERNAL_STATE;
     }
-}
\ No newline at end of file
+}
